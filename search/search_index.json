{"config":{"lang":["en"],"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"A set of libraries for pluggable business logic components \u00b6 The easiest way to make your code simple to reason about. dry-python is a collection of libraries aimed to help you to build an application in your domain. Stories \u00b6 You can define business logic processes with clear DSL. >>> from stories import story , arguments >>> class BuySubscription : ... @story ... @arguments ( \"price_id\" , \"user\" ) ... def buy ( I ): ... I . find_price ... I . check_balance ... I . persist_payment ... I . persist_subscription ... I . send_subscription_notification ... I . show_category Dependencies \u00b6 You can integrate it into frameworks you already use. >>> from dependencies import Injector , operation , this >>> from dependencies.contrib.django import view >>> from django.http import HttpResponse >>> from django.shortcuts import redirect >>> @view ... class BuySubscriptionView ( Injector ): ... buy_subscription = workflows . BuySubscription . buy ... price_id = this . kwargs [ \"id\" ] ... ... @operation ... def post ( buy_subscription , price_id , user ): ... result = buy_subscription . run ( price_id , user ) ... if result . is_success : ... return redirect ( result . value ) ... elif result . failed_on ( \"check_balance\" ): ... return HttpResponse ( \"<h1>Error: not enough money</h1>\" ) And a framework of your choice will not even notice the change. >>> from app.views import BuySubscriptionView >>> urlpatterns = [ ... path ( \"buy_subscription/<int:id>/\" , BuySubscriptionView . as_view ()), ... ] \u2014 \u2b50\ufe0f \u2014 Drylabs maintains dry-python and helps those who want to use it inside their organizations. Read more at drylabs.io","title":"Home"},{"location":"#a-set-of-libraries-for-pluggable-business-logic-components","text":"The easiest way to make your code simple to reason about. dry-python is a collection of libraries aimed to help you to build an application in your domain.","title":"A set of libraries for pluggable business logic components"},{"location":"#stories","text":"You can define business logic processes with clear DSL. >>> from stories import story , arguments >>> class BuySubscription : ... @story ... @arguments ( \"price_id\" , \"user\" ) ... def buy ( I ): ... I . find_price ... I . check_balance ... I . persist_payment ... I . persist_subscription ... I . send_subscription_notification ... I . show_category","title":"Stories"},{"location":"#dependencies","text":"You can integrate it into frameworks you already use. >>> from dependencies import Injector , operation , this >>> from dependencies.contrib.django import view >>> from django.http import HttpResponse >>> from django.shortcuts import redirect >>> @view ... class BuySubscriptionView ( Injector ): ... buy_subscription = workflows . BuySubscription . buy ... price_id = this . kwargs [ \"id\" ] ... ... @operation ... def post ( buy_subscription , price_id , user ): ... result = buy_subscription . run ( price_id , user ) ... if result . is_success : ... return redirect ( result . value ) ... elif result . failed_on ( \"check_balance\" ): ... return HttpResponse ( \"<h1>Error: not enough money</h1>\" ) And a framework of your choice will not even notice the change. >>> from app.views import BuySubscriptionView >>> urlpatterns = [ ... path ( \"buy_subscription/<int:id>/\" , BuySubscriptionView . as_view ()), ... ] \u2014 \u2b50\ufe0f \u2014 Drylabs maintains dry-python and helps those who want to use it inside their organizations. Read more at drylabs.io","title":"Dependencies"},{"location":"projects/","text":"Projects \u00b6 Returns \u00b6 Make your functions return something meaningful, typed, and safe! Source Code Issue Tracker Documentation Dependencies \u00b6 Dependency Injection for Humans. Source Code Issue Tracker Documentation Discussion Package Stories \u00b6 Define a user story in the business transaction DSL. Source Code Issue Tracker Documentation Discussion Package Mappers \u00b6 Declarative mappers from ORM models to domain entities. And back again! Source Code Issue Tracker Documentation Discussion Package Classes \u00b6 Smart, pythonic, ad-hoc, typed polymorphism for Python. Source Code Issue Tracker Documentation Lambdas \u00b6 Write short and fully-typed lambdas where you need them. Source Code Issue Tracker Documentation Editors \u00b6 A set of tools to automate clients' code upgrade as much as possible. Source Code Issue Tracker Discussion Package Bookshelf \u00b6 Code examples to learn dry-python with Django at the project scale. Source Code Issue Tracker Discussion \u2014 \u2b50\ufe0f \u2014 Drylabs maintains dry-python and helps those who want to use it inside their organizations. Read more at drylabs.io","title":"Projects"},{"location":"projects/#projects","text":"","title":"Projects"},{"location":"projects/#returns","text":"Make your functions return something meaningful, typed, and safe! Source Code Issue Tracker Documentation","title":"Returns"},{"location":"projects/#dependencies","text":"Dependency Injection for Humans. Source Code Issue Tracker Documentation Discussion Package","title":"Dependencies"},{"location":"projects/#stories","text":"Define a user story in the business transaction DSL. Source Code Issue Tracker Documentation Discussion Package","title":"Stories"},{"location":"projects/#mappers","text":"Declarative mappers from ORM models to domain entities. And back again! Source Code Issue Tracker Documentation Discussion Package","title":"Mappers"},{"location":"projects/#classes","text":"Smart, pythonic, ad-hoc, typed polymorphism for Python. Source Code Issue Tracker Documentation","title":"Classes"},{"location":"projects/#lambdas","text":"Write short and fully-typed lambdas where you need them. Source Code Issue Tracker Documentation","title":"Lambdas"},{"location":"projects/#editors","text":"A set of tools to automate clients' code upgrade as much as possible. Source Code Issue Tracker Discussion Package","title":"Editors"},{"location":"projects/#bookshelf","text":"Code examples to learn dry-python with Django at the project scale. Source Code Issue Tracker Discussion \u2014 \u2b50\ufe0f \u2014 Drylabs maintains dry-python and helps those who want to use it inside their organizations. Read more at drylabs.io","title":"Bookshelf"},{"location":"talks/","text":"Talks \u00b6 Domain Driven Design Toolkit 3 \u00b6 Video Slides dry-python stories & Machine Learning \u00b6 Video Slides Domain Driven Design Toolkit 2 \u00b6 Video Slides Keeping software soft \u00b6 Video Slides Domain Driven Design Toolkit \u00b6 Video Slides Introducing dry-python \u00b6 Video Slides \u2014 \u2b50\ufe0f \u2014 Drylabs maintains dry-python and helps those who want to use it inside their organizations. Read more at drylabs.io","title":"Talks"},{"location":"talks/#talks","text":"","title":"Talks"},{"location":"talks/#domain-driven-design-toolkit-3","text":"Video Slides","title":"Domain Driven Design Toolkit 3"},{"location":"talks/#dry-python-stories-machine-learning","text":"Video Slides","title":"dry-python stories &amp; Machine Learning"},{"location":"talks/#domain-driven-design-toolkit-2","text":"Video Slides","title":"Domain Driven Design Toolkit 2"},{"location":"talks/#keeping-software-soft","text":"Video Slides","title":"Keeping software soft"},{"location":"talks/#domain-driven-design-toolkit","text":"Video Slides","title":"Domain Driven Design Toolkit"},{"location":"talks/#introducing-dry-python","text":"Video Slides \u2014 \u2b50\ufe0f \u2014 Drylabs maintains dry-python and helps those who want to use it inside their organizations. Read more at drylabs.io","title":"Introducing dry-python"},{"location":"team/","text":"Team \u00b6 Artem Malyshev \u00b6 Since 2018 \u2014 Kaluga, Russia Creator of the dry-python project. A former member of the django channels maintenance team. Python programmer. Emacs user. proofit404 Nikita Sobolev \u00b6 Since 2018 \u2014 Moscow, Russia CTO at wemake.services, ElixirLangMoscow organizer. sobolevn Artem B \u00b6 Since 2019 \u2014 Chelyabinsk, Russia supadrupa Omer Katz \u00b6 Since 2020 \u2014 Israel thedrow Dmitry \u00b6 Since 2020 \u2014 Moscow, Russia ditansu \u2014 \u2b50\ufe0f \u2014 Drylabs maintains dry-python and helps those who want to use it inside their organizations. Read more at drylabs.io","title":"Team"},{"location":"team/#team","text":"","title":"Team"},{"location":"team/#artem-malyshev","text":"Since 2018 \u2014 Kaluga, Russia Creator of the dry-python project. A former member of the django channels maintenance team. Python programmer. Emacs user. proofit404","title":"Artem Malyshev"},{"location":"team/#nikita-sobolev","text":"Since 2018 \u2014 Moscow, Russia CTO at wemake.services, ElixirLangMoscow organizer. sobolevn","title":"Nikita Sobolev"},{"location":"team/#artem-b","text":"Since 2019 \u2014 Chelyabinsk, Russia supadrupa","title":"Artem B"},{"location":"team/#omer-katz","text":"Since 2020 \u2014 Israel thedrow","title":"Omer Katz"},{"location":"team/#dmitry","text":"Since 2020 \u2014 Moscow, Russia ditansu \u2014 \u2b50\ufe0f \u2014 Drylabs maintains dry-python and helps those who want to use it inside their organizations. Read more at drylabs.io","title":"Dmitry"}]}